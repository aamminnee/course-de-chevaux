# importation des biblioth√®ques
import time, sys, keyboard, os, colorama
from threading import Thread

"""
Ce que j'aurais aim√© r√©aliser :
- Modifier compl√®tement le code de mon jeu pour en faire une interface graphique avec Pygame.
- Ajouter d'autres modes de jeu tels que la course contre la montre et le saut de haies (faciles √† coder en interface graphique).
- Adapter mon code pour que N joueurs puissent jouer au lieu de seulement 2.
"""

colorama.init()

class Player(Thread):

    def __init__(self, position, name, commande, parcour, time, color):
        Thread.__init__(self)
        """
        Initialise les attributs de la classe Player (la position, son pseudo et sa commande pour avancer).
        """
        self.position = position
        self.name = name
        self.commande = commande
        self.parcour = parcour
        self.time = time
        self.color = color
        self.design = "üê¥"  # Son affichage fonctionne sur VS Code

    
    def run(self):
        """
        Code √† ex√©cuter pendant l'ex√©cution du thread.
        M√©thode : avance d'une unit√© la position du cheval.
        Entr√©e : la position du joueur.
        Sortie : la nouvelle position du joueur.
        """
        while self.position < self.parcour:
            event = keyboard.read_event()
            if event.event_type == keyboard.KEY_UP:
                if event.name.lower() == self.commande:
                    self.position += 1
                    print(self.color + self.design, "==>", self.name, ":", self.position, "m√®tres.")
                    if self.position == self.parcour:
                        self.time = time.time() - self.time
                        return self.position, self.time


# Quitter le jeu (modifications pygames)
def quitter_jeu():
    """
    Fonction : sert √† quitter le jeu.
    Entr√©e : r√©ponse de l'utilisateur.
    Sortie : _ 
    """
    print("Merci d'avoir jou√© ! Au revoir !")
    sys.exit(0) 
            

# Affiche le menu de parcours propos√©
def choix_parcour(): 
    """
    Fonction : affiche le menu des maps.
    Entr√©e : _
    Sortie : _
    """
    print(colorama.Fore.GREEN + '‚ïî' + '‚ïê' * 41 + '‚ïó')
    print("‚ïë" + ' ' * 41 + "‚ïë")
    print("‚ïë" + " " * 17 + "Parcours" + " " * 16 + "‚ïë")
    print("‚ïë" + ' ' * 41 + "‚ïë")
    print("‚ï†" + '‚ïê'*41 + "‚ï£")
    print("‚ïë" + ' ' * 41 + "‚ïë")
    print("‚ïë   0 - Test (10m)" + " " * 24 + "‚ïë")
    print("‚ïë   1 - Plaine (100m)" + " " * 21 + "‚ïë")
    print("‚ïë   2 - L'Hippodrome Olympique (150m)" + " " * 5 + "‚ïë")
    print("‚ïë   3 - Route Arc-en-ciel (200m)" + " " * 10 + "‚ïë")
    print("‚ïë" + ' ' * 41 + "‚ïë")
    print("‚ï†" + '‚ïê'*41 + "‚ï£")
    print("‚ïë" + " " * 15 + "[B]  Retour" + " " * 15 + "‚ïë") 
    print("‚ïö" + "‚ïê" * 41 + "‚ïù")


def regle():
    """
    Fonction : affiche le menu des r√®gles.
    Entr√©e : _
    Sortie : _ 
    """
    print(colorama.Fore.GREEN + '‚ïî' + '‚ïê' * 55 + '‚ïó')
    print("‚ïë"+ " " * 55 + "‚ïë")
    print("‚ïë" + " " * 24 + "R√®gles:" + " " * 24 + "‚ïë")
    print("‚ïë"+ " " * 55 + "‚ïë")
    print("‚ï†"+ "‚ïê" * 55 + "‚ï£")
    print("‚ïë - Les r√®gles de la course de chevaux                  ‚ïë")
    print("‚ïë - Ce jeu se joue √† 2                                  ‚ïë")
    print("‚ïë - Le but du jeu est d'atteindre le premier √† l'arriv√©e‚ïë")
    print("‚ïë - De 4 √† 99 ans                                       ‚ïë") 
    print("‚ï†" + "‚ïê" * 55 + "‚ï£")
    print("‚ïë                      B - Retour                       ‚ïë")
    print("‚ïö" + "‚ïê" * 55 + "‚ïù")


def condition_retour():
    """
    Fonction : demande √† l'utilisateur son choix.
    Entr√©e : un caract√®re de type str.
    Sortie : la r√©ponse de l'utilisateur dans une variable.
    """
    regle()
    retour = input("Appuyez sur [B] pour revenir dans le menu principal : ")
    os.system('cls' if os.name == 'nt' else 'clear')
    return retour


def commande():
    """
    Fonction : initie la commande du joueur (un seul caract√®re valide parmi la liste 'caractere').
    Entr√©e : _
    Sortie : la variable commande correspondant √† la r√©ponse de l'utilisateur (un seul caract√®re valide).
    """
    caractere = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
    commandes = input("Entrer votre commande (alphabet minuscule) : ")
    if len(commandes) == 1:
        if commandes in caractere:
            return commandes
        else:
            return None                 
    else:
        return None
    

def names(joueur_n):
    """
    Fonction : initie le pseudo du joueur (non d√©fini).
    Entr√©e : une cha√Æne de caract√®res.
    Sortie : la variable pseudo correspondant √† la r√©ponse de l'utilisateur.
    """
    caractere = [chr(i) for i in range(97, 123)] + [chr(i) for i in range(65, 91)] + [str(i+1) for i in range(9)] + [chr(i) for i in range(32, 127) if not chr(i).isalnum()]
    name = input(joueur_n + " Entrer votre pseudo : ")
    if len(name) >= 1: 
        for elt in name:
            if elt not in caractere:
                return None
        return name
    else:
        return None


def main():
    """
    Fonction : lance le jeu.
    Entr√©e : la r√©ponse de l'utilisateur.
    Sortie : entre dans la section du jeu correspondant √† la r√©ponse de l'utilisateur.
    Sortie alternative : quitte le jeu.
    """
    menu()
    choix = input("Que voulez-vous faire ? ")
    if choix == '0':
        os.system('cls' if os.name == 'nt' else 'clear')
        quitter_jeu()
    elif choix == '1': 
        os.system('cls' if os.name == 'nt' else 'clear')
        play()
    elif choix == '2':
        os.system('cls' if os.name == 'nt' else 'clear') 
        retour = condition_retour()
        os.system('cls' if os.name == 'nt' else 'clear')
        while retour.upper() != 'B':
            print('Option invalide.')
            os.system('cls' if os.name == 'nt' else 'clear')
            retour = condition_retour()
        if retour.upper() == 'B':
            os.system('cls' if os.name == 'nt' else 'clear')
            main()
    else:
        os.system('cls' if os.name == 'nt' else 'clear')
        main()


def p_1():
    """
    Fonction : sert √† couper les √©tapes de configuration des joueurs en 2 (player 1 et player 2).
    Entr√©e : _
    Sortie : le nom du joueur 1 et sa commande.
    """
    name1 = names("Joueur 1, ")
    if name1 == None:
        name1 = "glougloubs"
        print("Vous n'avez pas respect√© les r√®gles de ce jeu.")
        print("Dor√©navant, vous allez vous appeler [glougloubs].")
        time.sleep(1)
    else:
        print("Votre pseudo est", name1)
    commande1 = commande()
    if commande1 == None:
        commande1 = "a"
        print(name1, "vous √™tes tellement stupide que votre commande sera [a].")
        time.sleep(1)
    else:
        print("Votre commande est", commande1)
        time.sleep(1)
    return name1, commande1


def p_2(name1, commande1):
    """
    Fonction : sert √† couper les √©tapes de configuration des joueurs en 2 (player 1 et player 2).
    Entr√©e : le nom du joueur 1 et sa commande.
    Sortie : le nom des deux joueurs et les commandes des deux joueurs.
    """
    name2_v1 = names("Joueur 2, ")
    if name2_v1 == None:
        name2_v1 = "popo"
        print("Vous n'avez pas respect√© les r√®gles de ce jeu.")
        print("Dor√©navant, vous allez vous appeler [popo].")
        time.sleep(1)
    else:
        name2 = check_pseudonymes_mm(name1, name2_v1)
        if name2 == None:
            name2 = "popo"
            print("Vous n'avez pas respect√© les r√®gles de ce jeu.")
            print("Dor√©navant, vous allez vous appeler [popo].")
            time.sleep(1)
        else:
            print("Votre pseudo est", name2)
    commande2 = p_2_commande(name1, commande1)
    if commande2 == None:
        commande2 = "p"
        print("votre commande sera [p].")
        time.sleep(1)
    else:
        print("Votre commande est", commande2)
        time.sleep(1)
    return name2, commande2


def p_2_commande(name1, commande1):
    """
    Entr√©e : le nom du joueur 1 et sa commande.
    Sortie : la commande du joueur 2.
    """
    commande2_v1 = commande()
    commande2 = check_commandes_players_2_mm(name1, commande1, commande2_v1)
    return commande2


def menu_rapide():
    """
    Fonction n1 : configure les pseudos et commandes des deux joueurs 
    en les initiant et en v√©rifiant certaines conditions via des fonctions de v√©rification.
    Si l'une des configurations est fausse, il reconfigure les variables fauss√©es.
    Fonction n2 : lance la partie.
    Entr√©e : _
    Sortie : il retourne les deux pseudos des deux joueurs et leurs commandes associ√©es valid√©es par les fonctions de v√©rification.
    """
    print(colorama.Fore.GREEN + '‚ïî' + '‚ïê'*108 + '‚ïó')
    print(colorama.Fore.GREEN + "‚ïë                                               Menu rapide                                                  ‚ïë")
    print(colorama.Fore.GREEN + "‚ï†" + "‚ïê"*108 + "‚ï£")
    print(colorama.Fore.GREEN + "‚ïë", " "*45,  colorama.Fore.BLUE + "Joueur 1"+ " "*52,  colorama.Fore.GREEN + "‚ïë") 
    print(colorama.Fore.GREEN + '‚ïö' + '‚ïê'*108 + '‚ïù', colorama.Fore.BLUE)
    name_player_1, commande_player_1 = p_1()
    print(colorama.Fore.GREEN + "‚ïê"*110)
    time.sleep(0.3)
    os.system('cls' if os.name == 'nt' else 'clear')
    print(colorama.Fore.GREEN + '‚ïî' + '‚ïê'*108 + '‚ïó')
    print(colorama.Fore.GREEN + "‚ïë                                               Menu rapide                                                  ‚ïë")
    print(colorama.Fore.GREEN + "‚ï†" + "‚ïê"*108 + "‚ï£")
    print(colorama.Fore.GREEN + "‚ïë", " "*45,  colorama.Fore.RED + "Joueur 2"+ " "*52,  colorama.Fore.GREEN + "‚ïë")
    print(colorama.Fore.GREEN + '‚ïö' + '‚ïê'*108 + '‚ïù', colorama.Fore.RED)
    name_player_2, commande_player_2 = p_2(name_player_1, commande_player_1)
    print(colorama.Fore.GREEN + "‚ïê"*110)
    time.sleep(0.3)
    os.system('cls' if os.name == 'nt' else 'clear')
    return name_player_1, commande_player_1, name_player_2, commande_player_2


# Compte √† rebours (modifications pygames)
def compte_a_rebours():
    """
    Fonction : lance un compte √† rebours de 3 secondes.
    Entr√©e : _
    Sortie : il affiche √† chaque seconde le temps (en secondes) qu'il reste avant la fin du compte √† rebours.
    """
    count_down = ["3", "2", "1", "GO"]
    for elt in count_down: 
        print(colorama.Fore.CYAN + elt)
        time.sleep(1)
        os.system('cls' if os.name == 'nt' else 'clear')



def check_pseudonymes_mm(name1, name2):
    """
    Fonction : initie le pseudo du joueur 2 et s'assure que le pseudo du joueur 2 ne soit pas le m√™me que celui du joueur 1.
    Entr√©e : prend en param√®tre le pseudo du joueur 1 (pour remplir la condition de la fonction).
    Sortie : le pseudo entr√© du joueur 2 valid√© par la fonction.
    """
    if name1 == name2:
        name2 = None
        return name2
    else:
        return name2


def check_commandes_players_2_mm(name1, commande1, commande2):
    """
    Fonction : initie et v√©rifie si la touche que le joueur 2 entre est la m√™me que le joueur 1.
    Entr√©e : prend en param√®tre la touche du joueur 1.
    Sortie : la touche entr√©e du joueur 2 valid√©e par le code.
    """
    if commande1 == commande2:
        p_2(name1, commande1)
    else:
        return commande2


def fonction_menu_parcour():
    """
    Fonction : selon le choix de l'utilisateur, la 'map' sera diff√©rente.
    Entr√©e : prend en param√®tre le choix de l'utilisateur.
    Sortie : la map.
    """
    choix_parcour()
    rep = input("choisissez le parcours : ")
    choix = ["0", "1", "2", "3",]
    cons = [10, 100, 150, 200]
    if rep in choix:
        for i in range(len(choix)):
            if rep == choix[i]:
                return cons[i]
    else:
        os.system('cls' if os.name == 'nt' else 'clear')
        fonction_menu_parcour()


def menu():
    """
    Fonction : affiche le menu principal du jeu.
    Entr√©e : _
    Sortie : _
    """
    print(colorama.Fore.GREEN, '‚ïî' + '‚ïê' * 41 + '‚ïó')
    print(" ‚ïë" + " " * 41 + "‚ïë")
    print(" ‚ïë" + " " * 15 + "MENU DU JEU" + " " * 15 + "‚ïë")
    print(" ‚ïë" + " " * 41 + "‚ïë")
    print(" ‚ï†" + '‚ïê' * 41 + "‚ï£")
    print(" ‚ïë" + " " * 41 + "‚ïë")
    print(" ‚ïë    0 - Quitter le jeu                   ‚ïë")
    print(" ‚ïë    1 - Rejouer                          ‚ïë")
    print(" ‚ïë    2 - Afficher les r√®gles              ‚ïë")
    print(" ‚ïë" + " " * 41 + "‚ïë")
    print(colorama.Fore.GREEN, '‚ïö' + '‚ïê' * 41 + '‚ïù')


def play():
    """
    Fonction : sert √† initialiser enti√®rement les deux joueurs et √† lancer leurs threads pour jouer la partie.
               Selon les r√©sultats, elle affichera un score et relancera le jeu.
    Entr√©e : _
    Sortie : la partie, les scores et le jeu.
    """
    name1, commande1, name2, commande2 = menu_rapide()
    parcour = fonction_menu_parcour()
    compte_a_rebours()
    os.system('cls' if os.name == 'nt' else 'clear')
    temp = time.time()
    color1 = colorama.Fore.BLUE
    color2 = colorama.Fore.RED
    pseudo_1 = Player(0, name1, commande1, parcour, temp, color1)
    pseudo_2 = Player(0, name2, commande2, parcour, temp, color2)
    pseudo_1.start()
    pseudo_2.start()
    pseudo_1.join()
    pseudo_2.join()
    os.system('cls' if os.name == 'nt' else 'clear')
    if pseudo_1.time > pseudo_2.time:
        print(colorama.Fore.RED + '‚ïî' + '‚ïê' * 29 + '‚ïó')
        print("‚ïë" + " " * 10 + "VAINQUEUR" + " " * 10 + "‚ïë ==>    ‚ïë 1 - ", name2,"   ‚ïë   sec: ", int(pseudo_2.time), " ‚ïë  üê¥")
        print('‚ïö' + '‚ïê' * 29 + '‚ïù')
        print("")
        print(colorama.Fore.BLUE + '‚ïî' + '‚ïê' * 29 + '‚ïó')
        print("‚ïë" + " " * 10 + "PERDANT" + " " * 10 + "‚ïë ==>    ‚ïë 1 - ", name1,"   ‚ïë   sec: ", int(pseudo_1.time), " ‚ïë    üê¥")
        print('‚ïö' + '‚ïê' * 29 + '‚ïù')
        time.sleep(3)
        os.system('cls' if os.name == 'nt' else 'clear')
        input(colorama.Fore.GREEN + "Relancer: ")
        os.system('cls' if os.name == 'nt' else 'clear')
        main()
    elif pseudo_1.time < pseudo_2.time:
        print(colorama.Fore.BLUE + '‚ïî' + '‚ïê' * 29 + '‚ïó')
        print("‚ïë" + " " * 10 + "VAINQUEUR" + " " * 10 + "‚ïë ==>    ‚ïë 1 - ", name1,"   ‚ïë   sec: ", int(pseudo_1.time), " ‚ïë")
        print('‚ïö' + '‚ïê' * 29 + '‚ïù')
        print("")
        print(colorama.Fore.RED + '‚ïî' + '‚ïê' * 29 + '‚ïó')
        print("‚ïë" + " " * 10 + "PERDANT" + " " * 10 + "‚ïë ==>    ‚ïë 1 - ", name2,"   ‚ïë   sec: ", int(pseudo_2.time), " ‚ïë")
        print('‚ïö' + '‚ïê' * 29 + '‚ïù')
        time.sleep(3)
        os.system('cls' if os.name == 'nt' else 'clear')
        input(colorama.Fore.GREEN + "Relancer: ")
        os.system('cls' if os.name == 'nt' else 'clear')
        main()
    else:
        print("√âgalit√©")
        time.sleep(1.5)
        os.system('cls' if os.name == 'nt' else 'clear')
        input(colorama.Fore.GREEN + "Relancer: ")
        os.system('cls' if os.name == 'nt' else 'clear')
        main()

main()



    
